# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import seabird_chat_ingest_pb2 as seabird__chat__ingest__pb2


class ChatIngestStub(object):
    """This service is exposed separately to the chat frontend. Its purpose is to
    allow multiple different chat backends to register to Core and allow plugins
    to communicate with them.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IngestEvents = channel.stream_stream(
                '/seabird.ChatIngest/IngestEvents',
                request_serializer=seabird__chat__ingest__pb2.ChatEvent.SerializeToString,
                response_deserializer=seabird__chat__ingest__pb2.ChatRequest.FromString,
                )


class ChatIngestServicer(object):
    """This service is exposed separately to the chat frontend. Its purpose is to
    allow multiple different chat backends to register to Core and allow plugins
    to communicate with them.
    """

    def IngestEvents(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatIngestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IngestEvents': grpc.stream_stream_rpc_method_handler(
                    servicer.IngestEvents,
                    request_deserializer=seabird__chat__ingest__pb2.ChatEvent.FromString,
                    response_serializer=seabird__chat__ingest__pb2.ChatRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'seabird.ChatIngest', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatIngest(object):
    """This service is exposed separately to the chat frontend. Its purpose is to
    allow multiple different chat backends to register to Core and allow plugins
    to communicate with them.
    """

    @staticmethod
    def IngestEvents(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/seabird.ChatIngest/IngestEvents',
            seabird__chat__ingest__pb2.ChatEvent.SerializeToString,
            seabird__chat__ingest__pb2.ChatRequest.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

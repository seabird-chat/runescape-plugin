# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import seabird_pb2 as seabird__pb2


class SeabirdStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamEvents = channel.unary_stream(
                '/seabird.Seabird/StreamEvents',
                request_serializer=seabird__pb2.StreamEventsRequest.SerializeToString,
                response_deserializer=seabird__pb2.Event.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/seabird.Seabird/SendMessage',
                request_serializer=seabird__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=seabird__pb2.SendMessageResponse.FromString,
                )
        self.SendRawMessage = channel.unary_unary(
                '/seabird.Seabird/SendRawMessage',
                request_serializer=seabird__pb2.SendRawMessageRequest.SerializeToString,
                response_deserializer=seabird__pb2.SendRawMessageResponse.FromString,
                )
        self.JoinChannel = channel.unary_unary(
                '/seabird.Seabird/JoinChannel',
                request_serializer=seabird__pb2.JoinChannelRequest.SerializeToString,
                response_deserializer=seabird__pb2.JoinChannelResponse.FromString,
                )
        self.LeaveChannel = channel.unary_unary(
                '/seabird.Seabird/LeaveChannel',
                request_serializer=seabird__pb2.LeaveChannelRequest.SerializeToString,
                response_deserializer=seabird__pb2.LeaveChannelResponse.FromString,
                )
        self.ListChannels = channel.unary_unary(
                '/seabird.Seabird/ListChannels',
                request_serializer=seabird__pb2.ListChannelsRequest.SerializeToString,
                response_deserializer=seabird__pb2.ListChannelsResponse.FromString,
                )
        self.GetChannelInfo = channel.unary_unary(
                '/seabird.Seabird/GetChannelInfo',
                request_serializer=seabird__pb2.ChannelInfoRequest.SerializeToString,
                response_deserializer=seabird__pb2.ChannelInfoResponse.FromString,
                )
        self.SetChannelTopic = channel.unary_unary(
                '/seabird.Seabird/SetChannelTopic',
                request_serializer=seabird__pb2.SetChannelTopicRequest.SerializeToString,
                response_deserializer=seabird__pb2.SetChannelTopicResponse.FromString,
                )
        self.ListStreams = channel.unary_unary(
                '/seabird.Seabird/ListStreams',
                request_serializer=seabird__pb2.ListStreamsRequest.SerializeToString,
                response_deserializer=seabird__pb2.ListStreamsResponse.FromString,
                )
        self.GetStreamInfo = channel.unary_unary(
                '/seabird.Seabird/GetStreamInfo',
                request_serializer=seabird__pb2.StreamInfoRequest.SerializeToString,
                response_deserializer=seabird__pb2.StreamInfoResponse.FromString,
                )
        self.GetCoreInfo = channel.unary_unary(
                '/seabird.Seabird/GetCoreInfo',
                request_serializer=seabird__pb2.CoreInfoRequest.SerializeToString,
                response_deserializer=seabird__pb2.CoreInfoResponse.FromString,
                )


class SeabirdServicer(object):
    """Missing associated documentation comment in .proto file"""

    def StreamEvents(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Chat actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRawMessage(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinChannel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveChannel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChannels(self, request, context):
        """Chat connection introspection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChannelTopic(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStreams(self, request, context):
        """Seabird introspection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStreamInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoreInfo(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SeabirdServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamEvents,
                    request_deserializer=seabird__pb2.StreamEventsRequest.FromString,
                    response_serializer=seabird__pb2.Event.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=seabird__pb2.SendMessageRequest.FromString,
                    response_serializer=seabird__pb2.SendMessageResponse.SerializeToString,
            ),
            'SendRawMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRawMessage,
                    request_deserializer=seabird__pb2.SendRawMessageRequest.FromString,
                    response_serializer=seabird__pb2.SendRawMessageResponse.SerializeToString,
            ),
            'JoinChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinChannel,
                    request_deserializer=seabird__pb2.JoinChannelRequest.FromString,
                    response_serializer=seabird__pb2.JoinChannelResponse.SerializeToString,
            ),
            'LeaveChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveChannel,
                    request_deserializer=seabird__pb2.LeaveChannelRequest.FromString,
                    response_serializer=seabird__pb2.LeaveChannelResponse.SerializeToString,
            ),
            'ListChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChannels,
                    request_deserializer=seabird__pb2.ListChannelsRequest.FromString,
                    response_serializer=seabird__pb2.ListChannelsResponse.SerializeToString,
            ),
            'GetChannelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelInfo,
                    request_deserializer=seabird__pb2.ChannelInfoRequest.FromString,
                    response_serializer=seabird__pb2.ChannelInfoResponse.SerializeToString,
            ),
            'SetChannelTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChannelTopic,
                    request_deserializer=seabird__pb2.SetChannelTopicRequest.FromString,
                    response_serializer=seabird__pb2.SetChannelTopicResponse.SerializeToString,
            ),
            'ListStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStreams,
                    request_deserializer=seabird__pb2.ListStreamsRequest.FromString,
                    response_serializer=seabird__pb2.ListStreamsResponse.SerializeToString,
            ),
            'GetStreamInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStreamInfo,
                    request_deserializer=seabird__pb2.StreamInfoRequest.FromString,
                    response_serializer=seabird__pb2.StreamInfoResponse.SerializeToString,
            ),
            'GetCoreInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoreInfo,
                    request_deserializer=seabird__pb2.CoreInfoRequest.FromString,
                    response_serializer=seabird__pb2.CoreInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'seabird.Seabird', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Seabird(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def StreamEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/seabird.Seabird/StreamEvents',
            seabird__pb2.StreamEventsRequest.SerializeToString,
            seabird__pb2.Event.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/SendMessage',
            seabird__pb2.SendMessageRequest.SerializeToString,
            seabird__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRawMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/SendRawMessage',
            seabird__pb2.SendRawMessageRequest.SerializeToString,
            seabird__pb2.SendRawMessageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/JoinChannel',
            seabird__pb2.JoinChannelRequest.SerializeToString,
            seabird__pb2.JoinChannelResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/LeaveChannel',
            seabird__pb2.LeaveChannelRequest.SerializeToString,
            seabird__pb2.LeaveChannelResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/ListChannels',
            seabird__pb2.ListChannelsRequest.SerializeToString,
            seabird__pb2.ListChannelsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChannelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/GetChannelInfo',
            seabird__pb2.ChannelInfoRequest.SerializeToString,
            seabird__pb2.ChannelInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetChannelTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/SetChannelTopic',
            seabird__pb2.SetChannelTopicRequest.SerializeToString,
            seabird__pb2.SetChannelTopicResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/ListStreams',
            seabird__pb2.ListStreamsRequest.SerializeToString,
            seabird__pb2.ListStreamsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStreamInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/GetStreamInfo',
            seabird__pb2.StreamInfoRequest.SerializeToString,
            seabird__pb2.StreamInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCoreInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/seabird.Seabird/GetCoreInfo',
            seabird__pb2.CoreInfoRequest.SerializeToString,
            seabird__pb2.CoreInfoResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
